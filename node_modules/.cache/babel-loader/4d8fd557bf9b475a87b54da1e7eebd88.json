{"ast":null,"code":"var _jsxFileName = \"/Users/vsai23/Workspace/MilkBankOptimizer/MilkBankClient/src/components/results/Results.js\",\n    _s = $RefreshSig$();\n\nimport Save from \"./Save.js\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Results(props) {\n  _s();\n\n  const data = props.data;\n  const [matches, setMatches] = useState();\n  const [showPrint, setShowPrint] = useState(false);\n\n  const isCompatible = (a, b, targetCalories) => {\n    const volumeA = parseFloat(a.volume);\n    const volumeB = parseFloat(b.volume);\n    const kcalA = parseFloat(a.kcal);\n    const kcalB = parseFloat(b.kcal);\n    const proteinA = parseFloat(a.protein);\n    const proteinB = parseFloat(b.protein);\n    let totalVolume = volumeA + volumeB;\n    let weightedSumCal = (volumeA * kcalA + volumeB * kcalB) / totalVolume;\n    let weightedSumPro = (volumeA * proteinA + volumeB * proteinB) / totalVolume;\n\n    if (weightedSumCal <= targetCalories || weightedSumPro < 1) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const solvePairs = (inputData, targetCalories) => {\n    // [ [id1, id3], [id2, id6]  ]\n    let inputs = [...inputData];\n    let matchList = [];\n    console.log(inputs);\n    inputs.sort((a, b) => parseFloat(a.kcal) - parseFloat(b.kcal));\n    console.log(inputs);\n    console.log(`Target value: ${targetCalories}`);\n\n    while (inputs.length > 0) {\n      let l = 0;\n      let r = 1;\n      let matched = false;\n      console.log('outerloop');\n\n      while (r < inputs.length) {\n        if (isCompatible(inputs[l], inputs[r], targetCalories)) {\n          matchList.push([inputs[l], inputs[r]]);\n          inputs.splice(l, 1);\n          inputs.splice(r - 1, 1);\n          matched = true;\n          break;\n        } else {\n          r++;\n        }\n\n        console.log('inner loop');\n      }\n\n      if (!matched) {\n        inputs.splice(l, 1);\n      }\n    }\n\n    console.log(`Matches: ${matchList}`);\n    console.log(matchList);\n    setShowPrint(true);\n    setMatches(matchList);\n    return matchList;\n  };\n\n  if (showPrint) {\n    return /*#__PURE__*/_jsxDEV(Save, {\n      data: matches\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => solvePairs(data, 20),\n      children: \"Generate Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Results, \"IebfN1GOYiQuRyUat/E3CTPADNQ=\");\n\n_c = Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/vsai23/Workspace/MilkBankOptimizer/MilkBankClient/src/components/results/Results.js"],"names":["Save","useState","Results","props","data","matches","setMatches","showPrint","setShowPrint","isCompatible","a","b","targetCalories","volumeA","parseFloat","volume","volumeB","kcalA","kcal","kcalB","proteinA","protein","proteinB","totalVolume","weightedSumCal","weightedSumPro","solvePairs","inputData","inputs","matchList","console","log","sort","length","l","r","matched","push","splice"],"mappings":"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","sourcesContent":["import Save from \"./Save.js\"\nimport {useState} from 'react'\n\n\nexport default function Results(props) {\n\n    const data = props.data;\n\n    const [matches, setMatches] = useState(); \n    const [showPrint, setShowPrint] = useState(false);\n\n    \n\n\n    const isCompatible = (a, b, targetCalories) => {\n\n        const volumeA = parseFloat(a.volume);\n        const volumeB = parseFloat(b.volume);\n        const kcalA = parseFloat(a.kcal);\n        const kcalB = parseFloat(b.kcal);\n        const proteinA = parseFloat(a.protein);\n        const proteinB = parseFloat(b.protein);\n\n        let totalVolume = volumeA + volumeB;\n        let weightedSumCal = ((volumeA * kcalA) + (volumeB * kcalB)) / totalVolume;\n        let weightedSumPro = ((volumeA * proteinA) + (volumeB * proteinB)) / totalVolume;\n\n        if (weightedSumCal <= targetCalories || weightedSumPro < 1) {\n            return false;\n        }\n        return true;\n    };\n\n    const solvePairs = (inputData, targetCalories) => {\n        // [ [id1, id3], [id2, id6]  ]\n\n        let inputs = [...inputData];\n        let matchList = [];\n\n        console.log(inputs);\n        inputs.sort((a,b) => parseFloat(a.kcal) - parseFloat(b.kcal));\n\n        console.log(inputs);\n        console.log(`Target value: ${targetCalories}`);\n\n        while (inputs.length > 0) {\n            let l = 0;\n            let r = 1;\n\n            let matched = false;\n            console.log('outerloop')\n\n            while (r < inputs.length) {\n                if (isCompatible(inputs[l], inputs[r], targetCalories)) {\n                    matchList.push([inputs[l], inputs[r]]);\n                    inputs.splice(l, 1);\n                    inputs.splice(r -1, 1);\n                    matched = true;\n                    break;\n                } else {\n                    r++;\n                }\n\n                console.log('inner loop')\n            }\n\n            if (!matched) {\n                inputs.splice(l, 1);\n            }\n\n        }\n\n        console.log(`Matches: ${matchList}`);\n        console.log(matchList);\n        setShowPrint(true);\n        setMatches(matchList);\n        return matchList;\n    };\n\n    if (showPrint) {\n        return (\n\n        <Save data={matches} />\n        )\n    }\n     else return (\n        <div>\n            <button type='button' onClick={() => solvePairs(data, 20)}>Generate Results</button>\n\n            \n        </div>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}